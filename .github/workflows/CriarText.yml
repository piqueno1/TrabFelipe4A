name: Criar arquivo com informa√ß√µes do push   # Nome vis√≠vel na aba Actions

on:
  push:
    branches: [ "main" ]                      # Roda s√≥ em push na main

permissions:
  contents: write                             # Precisa para fazer push com GITHUB_TOKEN

jobs:
  create-readme:
    runs-on: ubuntu-latest

    steps:
      # Baixa o repo. fetch-depth:0 traz o hist√≥rico (necess√°rio p/ rebase).
      # persist-credentials:true mant√©m o GITHUB_TOKEN configurado para push.
      - name: Checkout do reposit√≥rio
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      # Gera/atualiza o arquivo; o bloco { ... } > readme.txt cria/substitui.
      - name: Criar arquivo com informa√ß√µes
        shell: bash
        run: |
          {
            echo "üëã Push por: ${{ github.actor }}"
            echo "üìÖ Data (UTC): $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            echo "üåø Branch: ${{ github.ref_name }}"
            echo "üîó Commit: ${{ github.sha }}"
          } > readme.txt
          cat readme.txt

      # Commita e faz push com prote√ß√£o:
      # - n√£o roda se o ator for o pr√≥prio bot (evita loop)
      # - s√≥ commita se houver mudan√ßas
      # - puxa com rebase antes do push (evita 'fetch first')
      # - tenta 3 vezes (corrida entre jobs)
      - name: Commitar e enviar (com pull --rebase e retry)
        if: ${{ github.actor != 'github-actions[bot]' }}
        shell: bash
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          # Evita warning de safe.directory em runners
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

          # S√≥ commita se houver diferen√ßas no working tree
          if git diff --quiet; then
            echo "Sem mudan√ßas para commitar."
            exit 0
          fi

          git add readme.txt
          git commit -m "chore(ci): atualizar readme.txt [skip ci]"  # [skip ci] evita loop

          # Rebase + push com at√© 3 tentativas (evita non-fast-forward)
          for i in 1 2 3; do
            echo "Tentativa $i de push..."
            # Atualiza a branch local rebaseando no remoto
            if git pull --rebase origin "${GITHUB_REF_NAME:-main}"; then
              # Empurra a HEAD atual para a mesma branch remota
              if git push origin HEAD:"${GITHUB_REF_NAME:-main}"; then
                echo "Push OK."
                exit 0
              fi
            else
              # Se houve conflito, aborta rebase para tentar de novo limpo
              git rebase --abort || true
            fi
            sleep 3
          done

          echo "Falhou ap√≥s 3 tentativas."
          exit 1
